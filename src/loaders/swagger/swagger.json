{
  "openapi": "3.0.0",
  "info": {
    "title": "API The world of Disney.",
    "description": "API with NodeJs, Express, Postman, Swagger and SQL.\n\n Explore the world of Disney knowing and modifying its movies and characters.",
    "version": "1.0.0",
    "contact": {
      "email": "flhor.garrido@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/api/v1",
      "description": "Development"
    },
    {
      "url": " https://node-10-challenge-alkemy.herokuapp.com",
      "description": "Produccion"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Operations for auth"
    },
    {
      "name": "Users",
      "description": "Operations for users"
    },
    {
      "name": "Characters",
      "description": "Character operations"
    },
    {
      "name": "Movies",
      "description": "Operations for movies"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login with an existing user.",
        "description": "Login with existing user, using email and password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/loginSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/loginInvalidCredentials"
          },
          "400": {
            "$ref": "#/components/responses/loginInvalidRequest"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register with an new user.",
        "description": "Register with a valid email and password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registerRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/registerSuccess"
          },
          "400": {
            "$ref": "#/components/responses/registerFailure"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get users.",
        "description": "Get users.\n \n Parameters that could be used in this service to filter users: \n \n * Name \n\n * Email \n\n * Limit \n\n * Offset \n\n * LastName.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAllSuccess"
          },
          "401": {
            "$ref": "#/components/responses/getAllWithoutToken"
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Save users.",
        "description": "Save users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/saveUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/saveUserSuccess"
          },
          "400": {
            "$ref": "#/components/responses/saveUserFailure"
          }
        }
      }
    },
    "/users/<id>": {
      "put": {
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update users.",
        "description": "Update users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateUserSuccess"
          },
          "400": {
            "$ref": "#/components/responses/updateUserFailure"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete users.",
        "description": "Delete users.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteUserSuccess"
          },
          "400": {
            "$ref": "#/components/responses/deleteUserFailure"
          }
        }
      }
    },
    "/characters": {
      "post": {
        "tags": ["Characters"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Save characters.",
        "description": "Save characters.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/saveCharacterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/saveCharacterSuccess"
          },
          "400": {
            "$ref": "#/components/responses/saveCharacterFailure"
          }
        }
      },
      "get": {
        "tags": ["Characters"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all characters.",
        "description": "Get all characters.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAllCharacterSuccess"
          },
          "401": {
            "$ref": "#/components/responses/getAllCharacterWithoutToken"
          }
        }
      }
    },
    "/characters/<id>": {
      "get": {
        "tags": ["Characters"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get characters detail.",
        "description": "Get characters detail .",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getCharacterDetailSuccess"
          },
          "400": {
            "$ref": "#/components/responses/getCharacterDetailFailure"
          }
        }
      },
      "put": {
        "tags": ["Characters"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update character.",
        "description": "Update character.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateCharacterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateCharacterSuccess"
          },
          "400": {
            "$ref": "#/components/responses/updateCharacterFailure"
          }
        }
      },
      "delete": {
        "tags": ["Characters"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete character.",
        "description": "Delete character.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteCharacterSuccess"
          },
          "400": {
            "$ref": "#/components/responses/deleteCharacterFailure"
          }
        }
      }
    },
    "/characters/image": {
      "post": {
        "tags": ["Characters"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Upload character image.",
        "description": "Upload character image.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/uploadCharacterImageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/uploadCharacterImageSuccess"
          },
          "400": {
            "$ref": "#/components/responses/uploadCharacterImageFailure"
          }
        }
      }
    },
    "/characters/<idCharacter>/movies/<idMovie>": {
      "put": {
        "tags": ["Characters"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Asociate Movie.",
        "description": "Asociate Movie.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/asociateMovieRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/asociateMovieSuccess"
          }
        }
      }
    },
    "/movies": {
      "post": {
        "tags": ["Movies"],
        "summary": "Save movies.",
        "description": "Save movies.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/saveMovieRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/saveMovieSuccess"
          },
          "400": {
            "$ref": "#/components/responses/saveMovieFailure"
          }
        }
      },
      "get": {
        "tags": ["Movies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all movie.",
        "description": "Get all movie.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAllMovieSuccess"
          },
          "401": {
            "$ref": "#/components/responses/getAllMovieWithoutToken"
          }
        }
      }
    },
    "/movies/<id>": {
      "get": {
        "tags": ["Movies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get movie detail.",
        "description": "Get movie detail .",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getMovieDetailSuccess"
          },
          "400": {
            "$ref": "#/components/responses/getMovieDetailFailure"
          }
        }
      },
      "put": {
        "tags": ["Movies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update movie.",
        "description": "Update movie.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateMovieRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateMovieSuccess"
          },
          "400": {
            "$ref": "#/components/responses/updateMovieFailure"
          }
        }
      },
      "delete": {
        "tags": ["Movies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete movie.",
        "description": "Delete movie.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteMovieSuccess"
          },
          "400": {
            "$ref": "#/components/responses/deleteMovieFailure"
          }
        }
      }
    },
    "/movie/image": {
      "post": {
        "tags": ["Movies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Upload movie image.",
        "description": "Upload movie image.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/uploadMovieImageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/uploadMovieImageSuccess"
          },
          "400": {
            "$ref": "#/components/responses/uploadMovieImageFailure"
          }
        }
      }
    },
    "/movies/<idMovie>/characters/<idCharacters>": {
      "put": {
        "tags": ["Movies"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Asociate Character.",
        "description": "Asociate Character.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/asociateCharacterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/asociateCharacterSuccess"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Ejecute el servicio **_login_** y aquí, solo ingrese token generado"
      }
    },
    "schemas": {
      "loginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "email": "flhor@gmail.com",
          "password": "1234"
        }
      },
      "registerRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "email": "{{randomNumber}}@gmail.com",
          "password": "123456"
        }
      },
      "saveUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "enum"
          }
        },
        "example": {
          "name": "Fernando",
          "email": "prueba@gmail.com",
          "password": "123456",
          "role": "USER_ROLE"
        }
      },
      "updateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "example": {
          "name": "Florencia",
          "email": "prueba2@gmail.com",
          "password": "1234567",
          "role": "ADMIN_ROLE"
        }
      },
      "saveCharacterRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer"
          },
          "history": {
            "type": "string"
          },
          "role": {
            "type": "integer"
          }
        },
        "example": {
          "name": "Spiderman{{randomNumber}}",
          "age": 15,
          "history": "Lorems imput",
          "weigth": 65
        }
      },
      "updateCharacterRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer"
          },
          "history": {
            "type": "string"
          },
          "role": {
            "type": "integer"
          }
        },
        "example": {
          "status": "OK",
          "data": [1]
        }
      },
      "uploadCharacterImageRequest": {
        "type": "object",
        "properties": {
          "image": {
            "type": "file"
          },
          "id": {
            "type": "number"
          }
        },
        "example": {
          "image": "test.jpg",
          "id": 315
        }
      },
      "asociateMovieRequest": {
        "type": "object",
        "properties": {
          "characterId": {
            "type": "number"
          },
          "movieId": {
            "type": "number"
          }
        },
        "example": {
          "characterId": 125,
          "movieId": 315
        }
      },
      "saveMovieRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "creationDate": {
            "type": "dateonly"
          },
          "calification": {
            "type": "number"
          },
          "genderType": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          }
        },
        "example": {
          "title": "Cenicienta",
          "creationDate": "2010-12-11",
          "calification": 10,
          "genderType": "ADVENTURE",
          "contentType": "MOVIE"
        }
      },
      "updateMovieRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "creationDate": {
            "type": "dateonly"
          },
          "calification": {
            "type": "number"
          },
          "genderType": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          }
        },
        "example": {
          "status": "OK",
          "data": [1]
        }
      },
      "uploadMovieImageRequest": {
        "type": "object",
        "properties": {
          "image": {
            "type": "file"
          },
          "id": {
            "type": "number"
          }
        },
        "example": {
          "image": "test.jpg",
          "id": 15
        }
      },
      "asociateCharacterRequest": {
        "type": "object",
        "properties": {
          "movieId": {
            "type": "number"
          },
          "characterId": {
            "type": "number"
          }
        },
        "example": {
          "movieId": 315,
          "characterId": 125
        }
      }
    },
    "responses": {
      "loginSuccessResponse": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": {
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjUsImlhdCI6MTY0MjUzNzgwOSwiZXhwIjoxNjQyNjI0MjA5fQ.7dRdeqvq1eHYhscFgoiEIKF0-3kYnMcg8NpPuDZajDU",
                "user": "Florencia Garrido",
                "role": "ADMIN_ROLE"
              }
            }
          }
        }
      },
      "loginInvalidCredentials": {
        "description": "Http status code response 401",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 401,
                "message": "Authentication failed! Email / password does not corecct. #1"
              }
            }
          }
        }
      },
      "loginInvalidRequest": {
        "description": "Http status code response 401",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "NotIsAEmail",
                    "msg": "Email is invalid",
                    "param": "email",
                    "location": "body"
                  }
                ]
              }
            }
          }
        }
      },
      "registerSuccess": {
        "description": "Http status code response 201",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": "User Registered. You can log in to use the API."
            }
          }
        }
      },
      "registerFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "prueba",
                    "msg": "Email is invalid",
                    "param": "email",
                    "location": "body"
                  }
                ]
              }
            }
          }
        }
      },
      "getAllSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": [
                {
                  "id": 25,
                  "password": "$2b$10$XND6v0E/SHHiFZA0CtGbGuIT0PesNTzXs0MbFyQlXT1fSGH3X4EeG",
                  "name": "Florencia Garrido",
                  "email": "flhor@gmail.com",
                  "enable": true,
                  "role": "ADMIN_ROLE",
                  "createdAt": "2021-12-20T21:09:58.000Z",
                  "updatedAt": "2021-12-20T21:09:58.000Z"
                }
              ]
            }
          }
        }
      },
      "getAllWithoutToken": {
        "description": "Http status code response 401",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 401,
                "message": "Authentication failed! Token required"
              }
            }
          }
        }
      },
      "saveUserSuccess": {
        "description": "Http status code response 201",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": {
                "enable": true,
                "id": 215,
                "name": "Florencia2",
                "email": "flor22@gmail.com",
                "password": "$2b$10$yx3ix5u6wExuzHF/DEVDe.0VmQuygoUYscrLwIzYi.cRigAwiJKz.",
                "role": "ADMIN_ROLE",
                "updatedAt": "2022-01-19T00:19:43.422Z",
                "createdAt": "2022-01-19T00:19:43.422Z"
              }
            }
          }
        }
      },
      "saveUserFailure": {
        "description": "Http status code response 201",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "prueba@gmail.com",
                    "msg": "Email already exist in DB",
                    "param": "email",
                    "location": "body"
                  }
                ]
              }
            }
          }
        }
      },
      "updateUserSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": [1]
            }
          }
        }
      },
      "updateUserFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "345234523452345",
                    "msg": "The id does not exist id DB",
                    "param": "id",
                    "location": "params"
                  }
                ]
              }
            }
          }
        }
      },
      "deleteUserSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": 1
            }
          }
        }
      },
      "deleteUserFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "234143134124",
                    "msg": "The id does not exist id DB",
                    "param": "id",
                    "location": "params"
                  }
                ]
              }
            }
          }
        }
      },
      "saveCharacterSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": {
                "id": 265,
                "name": "Spiderman0.07791433604654774",
                "age": 15,
                "history": "Lorems imput",
                "weigth": 65,
                "updatedAt": "2022-01-19T19:08:34.474Z",
                "createdAt": "2022-01-19T19:08:34.474Z"
              }
            }
          }
        }
      },
      "saveCharacterFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "msg": "Invalid value",
                    "param": "history",
                    "location": "body"
                  }
                ]
              }
            }
          }
        }
      },
      "getCharacterDetailSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": {
                "id": 225,
                "image": "https://alkemy-challenge-nodejs.s3.amazonaws.com/Spiderman0.6097328898902299.jpeg",
                "name": "Spiderman0.6097328898902299",
                "age": 15,
                "history": "Lorems imput",
                "weigth": 65,
                "createdAt": "2021-12-29T20:49:46.000Z",
                "updatedAt": "2022-01-06T15:32:57.000Z",
                "movies": [
                  {
                    "id": 35,
                    "image": "https://alkemy-challenge-nodejs.s3.amazonaws.com/Cenicienta.jpeg",
                    "title": "Cenicienta",
                    "creationDate": "2021-03-25",
                    "calification": 10,
                    "createdAt": "2021-12-21T00:04:34.000Z",
                    "updatedAt": "2021-12-29T20:43:31.000Z",
                    "contentTypeId": 5,
                    "genderTypeId": 5,
                    "charactersMovies": {
                      "createdAt": "2022-01-06T16:32:58.000Z",
                      "updatedAt": "2022-01-06T16:32:58.000Z",
                      "movieId": 35,
                      "characterId": 225
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "getCharacterDetailFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "234143134124",
                    "msg": "The id does not exist in DB",
                    "param": "id",
                    "location": "params"
                  }
                ]
              }
            }
          }
        }
      },
      "getAllCharacterSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": [
                {
                  "name": "Spiderman0.3043350958731932",
                  "image": null
                },
                {
                  "name": "Spiderman0.18478708325779358",
                  "image": null
                }
              ]
            }
          }
        }
      },
      "getAllCharacterWithoutToken": {
        "description": "Http status code response 401",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 401,
                "message": "Authentication failed! Invalid token"
              }
            }
          }
        }
      },
      "updateCharacterSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": [1]
            }
          }
        }
      },
      "updateCharacterFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "345234523452345",
                    "msg": "The id does not exist in DB",
                    "param": "id",
                    "location": "params"
                  }
                ]
              }
            }
          }
        }
      },
      "uploadCharacterImageSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": [1]
            }
          }
        }
      },
      "uploadCharacterImageFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "msg": "Invalid value",
                    "param": "id",
                    "location": "body"
                  },
                  {
                    "msg": "Invalid value",
                    "param": "id",
                    "location": "body"
                  },
                  {
                    "msg": "The id does not exist in DB",
                    "param": "id",
                    "location": "body"
                  },
                  {
                    "msg": "You should upload a file",
                    "param": "image",
                    "location": "body"
                  }
                ]
              }
            }
          }
        }
      },
      "asociateMovieSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK"
            }
          }
        }
      },
      "deleteCharacterSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": 1
            }
          }
        }
      },
      "deleteCharacterFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "234143134124",
                    "msg": "The id does not exist in DB",
                    "param": "id",
                    "location": "params"
                  }
                ]
              }
            }
          }
        }
      },
      "saveMovieSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": {
                "id": 265,
                "name": "Spiderman0.07791433604654774",
                "age": 15,
                "history": "Lorems imput",
                "weigth": 65,
                "updatedAt": "2022-01-19T19:08:34.474Z",
                "createdAt": "2022-01-19T19:08:34.474Z"
              }
            }
          }
        }
      },
      "saveMovieFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "msg": "Invalid value",
                    "param": "history",
                    "location": "body"
                  }
                ]
              }
            }
          }
        }
      },
      "getMovieDetailSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": {
                "id": 295,
                "title": "Cenicienta 0.0964165002750077",
                "image": null,
                "creationDate": "2010-12-11",
                "calification": 10,
                "characters": [],
                "genderType": {
                  "id": 5,
                  "description": "ADVENTURE"
                },
                "contentType": {
                  "id": 5,
                  "description": "MOVIE"
                }
              }
            }
          }
        }
      },
      "getMovieDetailFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "234143134124",
                    "msg": "The id does not exist id DB",
                    "param": "id",
                    "location": "params"
                  }
                ]
              }
            }
          }
        }
      },
      "getAllMovieSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": [
                {
                  "title": "Cenicienta 0.21016307029648162",
                  "image": null,
                  "creationDate": "2010-12-11"
                },
                {
                  "title": "Cenicienta 0.5702263505422445",
                  "image": null,
                  "creationDate": "2010-12-11"
                }
              ]
            }
          }
        }
      },
      "getAllMovieWithoutToken": {
        "description": "Http status code response 401",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 401,
                "message": "Authentication failed! Invalid token"
              }
            }
          }
        }
      },
      "updateMovieSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": [1]
            }
          }
        }
      },
      "updateMovieFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "345234523452345",
                    "msg": "The id does not exist in DB",
                    "param": "id",
                    "location": "params"
                  }
                ]
              }
            }
          }
        }
      },
      "uploadMovieImageSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": [1]
            }
          }
        }
      },
      "uploadMovieImageFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "msg": "Invalid value",
                    "param": "id",
                    "location": "body"
                  },
                  {
                    "msg": "Invalid value",
                    "param": "id",
                    "location": "body"
                  },
                  {
                    "msg": "The id does not exist in DB",
                    "param": "id",
                    "location": "body"
                  },
                  {
                    "msg": "You should upload a file",
                    "param": "image",
                    "location": "body"
                  }
                ]
              }
            }
          }
        }
      },
      "asociateCharacterSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK"
            }
          }
        }
      },
      "deleteMovieSuccess": {
        "description": "Http status code response 200",
        "content": {
          "application/json": {
            "example": {
              "status": "OK",
              "data": 1
            }
          }
        }
      },
      "deleteMovieFailure": {
        "description": "Http status code response 400",
        "content": {
          "application/json": {
            "example": {
              "error": {
                "code": 400,
                "message": "Validation Errors",
                "detail": [
                  {
                    "value": "234143134124",
                    "msg": "The id does not exist in DB",
                    "param": "id",
                    "location": "params"
                  }
                ]
              }
            }
          }
        }
      }
    }
  }
}
